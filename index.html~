<html>
	<head>
		<title>SensorReader</title>
		
		<script src="/socket.io/socket.io.js"></script>
		<script type="text/javascript" src="/js/jquery-1.12.3.min.js"></script>
		<script type="text/javascript" src="/js/bootstrap.min.js"></script>
		<!--[if lte IE 8]><script language="javascript" type="text/javascript" src="/js/flot/excanvas.min.js"></script><![endif]-->
		<script type="text/javascript" src="/js/flot/jquery.flot.min.js"></script>
		<script type="text/javascript" src="/js/flot/jquery.flot.time.js"></script>
		<script type="text/javascript" src="/js/flot/jquery.flot.symbol.js"></script>
		<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
		<link rel="stylesheet" href="/css/bootstrap.min.css">
		<link rel="stylesheet" href="/css/style.css">
		<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
		<style>
			#dialog label, #dialog input { display:block; }
			#dialog label { margin-top: 0.5em; }
			#dialog input, #dialog textarea { width: 95%; }
			#tabs { margin-top: 1em; }
			#tabs li .ui-icon-close { float: left; margin: 0.4em 0.2em 0 0; cursor: pointer; }
			#add_tab { cursor: pointer; }
		</style>
		
		<script>
		
		//populate device list on start
		$(document).ready( function (){
			populateDevices(false);
		});
		
			
		</script>
	</head>
	<body bgcolor=white>
		
		<table border="0" cellpadding="10">
			<tr>
				<td>
					<h1>SensorReader</h1>
				</td>
			</tr>
		</table>
		
		<!-- modal -->
		<div class="modal fade" id="tagModal" tabindex="-1" role="dialog" aria-labelledby="tagModalLabel" aria-hidden="true">
			<div class="modal-dialog" role="document">
				<div class="modal-content" role="document">
					<div class="modal-header" role="document">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
						<h2 class="modal-title" id="tagModalTitle">Modal title</h2>
					</div>
					<div class="modal-body">
						<form>
							<fieldset class="ui-helper-reset">
								<label for="tagsSelector">Select tag</label>
								<select name="tagsSelector" id="tagsSelector"></select>
							</fieldset>
						</form>	
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
						<button type="button" onclick="queryTimeDB()" class="btn btn-primary" data-dismiss="modal">Open</button>
					</div>
				</div>
			</div>
		</div>
		
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<div class="panel-group" id="panel-395888">
						<div class="panel panel-default">
							<div class="panel-heading">
								 <a class="panel-title" data-toggle="collapse" data-parent="#panel-395888" href="#panel-devices">Registered devices</a>
							</div>
							<div id="panel-devices" class="panel-collapse collapse">
								<div class="panel-body">
									<div id="container-devices">
										<div id="table-devices" class= "table">
								
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-md-12">
					<div id="dialog" title="Tag data">
						
					</div>
					<div id="tabs">
						<ul>
						</ul>
					</div>
				</div>
			</div>
		</div>

		
		<script type="text/javascript">
			
			var tabSockets = {};
			var tabData = {};
			var tabInterval = {};
			var deviceSocketId;
			var startDrawing = false;
			var devices;
			var now = new Date().getTime();
			var test = 0;
			var totalPoints = 250;
			var updateInterval;
			var tabCounter = 0;
			//var tabTemplate = "<li><a href='#{href}'>#{label}</a></li>";
			var tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close' role='presentation'>Remove Tab</span></li>";
			var tabContentTemplate = "";
			//var tabContentTemplate = "<button type='button' onclick='button1(deviceSocketId)'>Dump data to DB</button><button type='button' onclick='button2(deviceSocketId)'>Dump data to text file</button><button type='button'  onclick='button3(deviceSocketId, 60)' >Save period to DB</button>";
			var tabs = $( "#tabs" ).tabs();
			
			function ab2str (arrayBuffer){
				return String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));
			}
			
			
			var socket = io.connect();
			
			
			tabs.delegate( "span.ui-icon-close", "click", function() {
					var panelId = $( this ).closest( "li" ).remove().attr( "aria-controls" );
					if (tabSockets[panelId] == null){
						delete tabSockets[panelId];
						delete tabInterval[panelId];
						delete tabData[panelId];
						$( "#" + panelId ).remove();
						tabs.tabs( "refresh" );
					} else {
						var socketTag = tabSockets[panelId].substring(2);
						stopWatchingDevice($('#device-watch-btn-' + socketTag)[0]);
					}
				});
			
			socket.on("test", function (msg, socketId) {
				
				var activeTab;
				
				for (var c in tabSockets) {
					if (tabSockets[c] == socketId){
						activeTab = c;
					}
				}
				
				if (activeTab != null){
					console.log("BUFFER ARRAY", socketId);
					deviceSocketId = socketId;
					var parsed = JSON.parse(msg);
					var timestamp = parsed.start_timestamp;
					var resolution = parsed.resolution;

					for (var j = 0; j < parsed.data[0].length; j++) {
						var tempTime = timestamp += resolution;
						//var tempTime = test += 1;
						for (var i = 0; i < parsed.data.length; i++){	
							var temp = [tempTime, parsed.data[i][j]];
							tabData[activeTab]['dataBuff' + (i+1)].push(temp);
						}
					}
				}
			});

			socket.on("reconnect", function (oldSocketId, newSocketId) {
				
				populateDevices(true);
				
				var panelId;
				for (var c in tabSockets) {
					if (tabSockets[c] == oldSocketId){
						panelId = c;
					}
				}
				
				/*var oldSocketKey = oldSocketId.substring(2);
				var newSocketKey = newSocketId.substring(2);
				//var deviceItemRow = $('#device-row-' + newSocketKey)[0];
				//var editedItemRow = $( deviceItemRow.replace( /newSocketKey/g, newSocketKey));
				var socketButton = $('#device-watch-btn-' + newSocketKey)[0];
				socketButton.onclick = function(){
					stopWatchingDevice(socketButton);
				}
				socketButton.innerHTML = "Stop watching";*/
					
				delete tabSockets[panelId];
				tabSockets[panelId] = newSocketId;
			});

			socket.on("devices_changed", function (newDevices) {
				
				devices = newDevices;
				populateDevices(false);
			});

			
			function updateCharts (activeTab, numberOfCharts, options, updateInterval){
				
				
				if (tabData[activeTab]['dataBuff1'].length > 0){
				
					//init chart if data empty
					if (tabData[activeTab]['data1'].length == 0){
						
						var startTimeData = tabData[activeTab]['dataBuff1'][0][0];
						var startTimeChart = startTimeData - 250 * updateInterval;
						
						while (tabData[activeTab]['data1'].length < 250) {
							var temp = [startTimeChart += updateInterval, 0];
							//var temp = [test += 1, 0];
							for (var j = 0; j < numberOfCharts; j++) {
								tabData[activeTab]['data' + (j+1)].push(temp);
							}
						}
						
						for (var j = 0; j < numberOfCharts; j++) {
							$.plot($("#flot-placeholder"+ (j + 1) +"-" + activeTab)
								, [{ data: tabData[activeTab]['data' + (j + 1)], color: "#00FF00" }]
								, options).draw();
						}
					}
					
					for (var j = 1; j <= numberOfCharts; j++) {
							tabData[activeTab]['data' + j].shift();
							tabData[activeTab]['data' + j]
								.push(tabData[activeTab]['dataBuff' + j].shift());
					}
				
					if (tabData[activeTab]['dataBuff1'].length > 1000/updateInterval){
						//while(tabData[activeTab]['dataBuff1'].length > 1000/updateInterval + 1){
							for (var j = 1; j <= numberOfCharts; j++) {
								tabData[activeTab]['data' + j].shift();
								tabData[activeTab]['data' + j]
									.push(tabData[activeTab]['dataBuff' + j].shift());
							}
						//}
					} 
					
					if (tabData[activeTab]['dataBuff1'].length > 2000/updateInterval){
						//while(tabData[activeTab]['dataBuff1'].length > 1000/updateInterval + 1){
							for (var j = 1; j <= numberOfCharts; j++) {
								tabData[activeTab]['data' + j].shift();
								tabData[activeTab]['data' + j]
									.push(tabData[activeTab]['dataBuff' + j].shift());
							}
						//}
					} 
					//else {
						
						
					//}
					
					while(tabData[activeTab]['data1'].length > 250){
						for (var j = 0; j < numberOfCharts; j++) {
								tabData[activeTab]['data' + (j+1)].shift();
							}
					}
					
					console.log("BUFFER LEN", tabData[activeTab]['dataBuff1'].length);
					console.log("ARRAY", tabData[activeTab]['data1'].length);

					for (var j = 1; j <= numberOfCharts; j++) {
						var plot = $.plot($("#flot-placeholder"+ j +"-" + activeTab)
							, [{ data: tabData[activeTab]['data' + j], color: "#00FF00" }]
							, options);
						plot.draw();
					}
				}
			}
			
			function populateDevices(){
				
				$("#table-devices").remove();
				$("#container-devices").append( "<div id='table-devices' class= 'table'></div>" );
				$("#table-devices").append( "<thead><tr><th>Device</th><th>Sensor</th><th>Vendor</th><th>Resolution</th><th>DB tag</th><th>DB status</th><th>Watching</th><th>View data</th></tr></thead>" );
				
				socket.emit("request_devices", function (serverDevices){
						devices = serverDevices;
						console.log("REGISTERED_DEVICES: ", serverDevices);
						for(key in devices){
							var device = JSON.parse(devices[key]);
							var deviceItemTemplate = '<tbody><tr id=device-row-'+ key.substring(2) +'"><td>'+device.device+'</td><td>'+device.sensor+'</td><td>'+device.sensor_vendor+'</td><td>'+device.resolution+'</td><td><input type="text" class="form-control" id="text-tag-'+key.substring(2)+'"></td><td><button id=device-db-btn-'+ key.substring(2) +' type="button" class="btn btn-default" value="'+key+'" onclick="saveToDB(this)">Save to DB</button</td><td><button id=device-watch-btn-'+ key.substring(2) +' type="button" class="btn btn-default" value="'+key+'" onclick="watchDevice(this)">Watch</button</td><td><button id=device-view-data-btn-'+ key.substring(2) +' type="button" class="btn btn-default" data-toggle="modal" data-target="#tagModal" value="'+key+'" onclick="openAddDbTabModal(this)">View</button</td></tr></tbody>';

							$("#table-devices").append(deviceItemTemplate);
						}
					});
			}
			
			function watchDevice(button) {
					
					button.onclick = function(){
						stopWatchingDevice(button);
					}
					button.innerHTML = "Stop watching";
					var deviceInfo = JSON.parse(devices[button.value]);
					var label = deviceInfo.device || "Tab " + tabCounter,
					id = "tabs-" + tabCounter,
					li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
					//tabContentHtml = tabContent.val() || "Tab " + tabCounter + " content.";
					tabContentHtml = tabContentTemplate;
					var dataFields = deviceInfo.data_fields;
					var sensorName = deviceInfo.sensor;
					var device = deviceInfo.device;
					var totalPoints = 250;
					var updateInterval = deviceInfo.resolution;
					var now = new Date().getTime();
					var options = {
						series: {
							shadowSize: 0,
							lines: {
								show: true,
								lineWidth: 1.2,
								fill: false
							}
						},
						xaxis: {
							show:false
						},
						yaxis: {
							min: -deviceInfo.sensor_maxrange,
							max: deviceInfo.sensor_maxrange,
							tickSize: deviceInfo.sensor_maxrange/3,
						},
						legend: {        
							labelBoxBorderColor: "#fff"
						},
						grid: {                
							backgroundColor: "#000000",
							tickColor: "#008040"
						}
					};

					for (var j = 1; j<=dataFields; j++){
						tabContentHtml += "<div id='flot-placeholder" + j + "-" + id + "' style='width:800px;height:200px;margin:0 auto'></div>"
					}
					
					tabSockets[id] = button.value;
					tabData[id] = {};
					for (var j = 1; j<=dataFields; j++){
						var a = "data" + j;
						var b = "dataBuff" + j;
						tabData[id][a] = [];
						tabData[id][b] = [];
					}
					
					socket.emit("register_observer",  button.value)
					tabs.find( ".ui-tabs-nav" ).append( li );
					tabs.append( "<div id='" + id + "'><p>" + tabContentHtml + "</p></div>" );
					tabs.tabs( "refresh" ).tabs({active: id});
					tabCounter++;
					
					tabInterval[id] = setInterval(updateCharts, updateInterval, id, dataFields, options, updateInterval);
			}
			
			function stopWatchingDevice(button) { 
			
				var panelId;
					
				for (var c in tabSockets) {
					if (tabSockets[c] == button.value){
						panelId = c;
					}
				}
					
				button.onclick = function(){
					watchDevice(button);
				}
				button.innerHTML = "Watch";
					
				clearInterval(tabInterval[panelId]);
				socket.emit("unregister_observer",  tabSockets[panelId]);
				delete tabSockets[panelId];
				delete tabInterval[panelId];
				delete tabData[panelId];
				$( "#" + panelId ).remove();
				tabs.find( '[aria-controls="'+panelId+'"]' ).remove().attr( "aria-controls" );
				tabs.tabs( "refresh" );
			}
				
			function saveToDB(button) { 
			
				var tag = $('#text-tag-' + button.value.substring(2))[0].value;
				
				if (tag)
					socket.emit("db_save_continuous", button.value, tag);
				else
					socket.emit("db_save_continuous", button.value, "measurement_" +  new Date().getTime());
					
				button.onclick = function(){
					stopSavingToDB(button);
				}
				button.innerHTML = "Stop saving to DB";
			}
			
			function stopSavingToDB(button){
				socket.emit("db_stop_continuous", button.value);
				
				button.onclick = function(){
					saveToDB(button);
				}
				button.innerHTML = "Save to DB";
			}
			
			function openAddDbTabModal(button){
			
				var device = JSON.parse(devices[button.value]);
				
				console.log("DEVICE: ", device);
				//emit zahtjev za mjerenja iz pg
				socket.emit("request_db_tags", device.id, function (dbTags){
						
						$("#tagsSelector").find('option').remove();
						for(key in dbTags){
							var parsedTag = JSON.parse(dbTags[key]);
							var formatedKey = dbTags[key].replace(/\"/g, "\'");
							$("#tagsSelector").append("<option value='"+ dbTags[key] +"'>"+parsedTag.tag+"</option>");
						}
						
						//dialog.dialog( "open" );
					});
			
			}
			
			function queryTimeDB(){
			
				var device = $("#tagsSelector").val();
				var deviceMeasurement = JSON.parse(device);
				var time_end = Number(deviceMeasurement.time_start) + 1000 * 15 * 60;
				var query = "select sensor_data from sensor_data_bucket where time > " + deviceMeasurement.time_start + " and time < " + time_end + " and device_id = '"+ deviceMeasurement.device_id +"' and tag = '" + deviceMeasurement.tag + "'";
				//var query = "select sensor_data from sensor_data where time > 1465492919308 and time < 1465493037307 and device_id = 'f2d3f2b8-ce92-457c-b56e-23080e10d2b8' and sensor_name = 'Gyroscope sensor' and tag = 'TestingGyro'";
				
				socket.emit("db_query",query , function(rslt){
				
					addDbTab(rslt.rows, device);
				
				});
			
			}
			
			function addDbTab(data, measurement) {
					var measurementParsed = JSON.parse(measurement);
					var tabTemplate = "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close' role='presentation'>Remove Tab</span></li>";
					var label = measurementParsed.tag,
					id = "tabs-" + tabCounter,
					li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) )
					var tabContentHtml = tabContentTemplate;
					var totalPoints = data.length;
					var dataSplit =  ab2str(data[0][0]);
					var dataFields = dataSplit.split(',').length;
					var minY = 0;
					var maxY = 0;
					
					tabContentHtml += "<div><p>Device : " + measurementParsed.device_name + " </p><p>Sensor : " + measurementParsed.sensor_name + " </p><p>Resolution : " + measurementParsed.resolution + " </p><p>Device : " + new Date(Number(measurementParsed.time_start)) + " </p></div>"
					
					for (var j = 1; j<=dataFields; j++){
						tabContentHtml += "<div id='flot-placeholder" + j + "-" + id + "' style='width:800px;height:200px;margin:0 auto'></div>"
					}
					
					tabData[id] = {};
					for (var j = 1; j<=dataFields; j++){
						var a = "data" + j;
						tabData[id][a] = [];
					}
					
					
					tabs.find( ".ui-tabs-nav" ).append( li );
					tabs.append( "<div id='" + id + "'><p>" + tabContentHtml + "</p></div>" );
					
					//init chart
					var counter = 0;
					for (var j = 0; j < data.length; j++) {
						
						var dataRow = ab2str(data[j][0]).split(',');
						for (var i = 0; i < dataFields; i++) {
						
							if (Number(dataRow[i].trim()) > maxY)
								maxY = Number(dataRow[i].trim());
								
							if (Number(dataRow[i].trim()) < minY)
								minY = Number(dataRow[i].trim());
						
							var temp = [counter, dataRow[i].trim()];
							tabData[id]['data' + (i+1)].push(temp);
						}
						counter++;
					}			
					
					while (tabData[id]['data1'].length < 250) {
						var temp = [counter, 0];
						for (var j = 0; j < dataFields; j++) {
							tabData[id]['data' + (j+1)].push(temp);
						}
						counter++;
					}
					
					var options = {
						series: {
							shadowSize: 0,
							lines: {
								show: true,
								lineWidth: 1.2,
								fill: false
							}
						},
						xaxis: {
							show:false
						},
						yaxis: {
							min: minY,
							max: maxY,
							tickSize: maxY / 3,
						},
						legend: {        
							labelBoxBorderColor: "#fff"
						},
						grid: {                
							backgroundColor: "#000000",
							tickColor: "#008040"
						}
					};
					
					for (var j = 0; j < dataFields; j++) {
						$.plot($("#flot-placeholder"+ (j + 1) +"-" + id)
							, [{ data: tabData[id]['data' + (j + 1)], color: "#00FF00" }]
							, options).draw();
					}
					
					tabs.tabs( "refresh" );
					tabCounter++;
					
				}
		</script>  
	</body>
</html>								
